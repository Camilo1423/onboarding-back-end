// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  // output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       String @id @default(uuid())
  email    String @unique
  password String
  name     String
  role     String @default("admin")

  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  RefreshToken RefreshToken[]
}

model Collaborator {
  id                      String   @id @default(uuid())
  fullName                String
  email                   String   @unique
  entryDate               DateTime
  technicalOnboardingDone Boolean  @default(false)
  welcomeOnboardingDone   Boolean  @default(false)

  onboardingAssignments        OnboardingAssignment[] // técnico
  welcomeOnboardingAssignments WelcomeOnboardingAssignment[] // bienvenida

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model TechnicalOnboarding {
  id          String   @id @default(uuid())
  name        String
  description String?
  startDate   DateTime
  endDate     DateTime
  meetingUrl  String?
  notificationSent Boolean @default(false)

  assignments OnboardingAssignment[] // Relación 1:N

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model WelcomeOnboarding {
  id          String   @id @default(uuid())
  name        String
  description String?
  startDate   DateTime
  endDate     DateTime
  meetingUrl  String?
  notificationSent Boolean @default(false)

  assignments WelcomeOnboardingAssignment[] // Relación 1:N

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model OnboardingAssignment {
  id              String  @id @default(uuid())
  collaboratorId  String
  onboardingId    String
  completed       Boolean @default(false)

  collaborator Collaborator        @relation(fields: [collaboratorId], references: [id])
  onboarding   TechnicalOnboarding @relation(fields: [onboardingId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([collaboratorId, onboardingId])
}

model WelcomeOnboardingAssignment {
  id              String  @id @default(uuid())
  collaboratorId  String
  onboardingId    String
  completed       Boolean @default(false)

  collaborator Collaborator      @relation(fields: [collaboratorId], references: [id])
  onboarding   WelcomeOnboarding @relation(fields: [onboardingId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([collaboratorId, onboardingId])
}

model RefreshToken {
  id        String   @id @default(uuid())
  token     String   @unique
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  expiresAt DateTime
  createdAt DateTime @default(now())

  @@index([userId])
}
